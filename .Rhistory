r <- qmap(paste(df_M10$latitude[1],df_M10$longitude[1],sep = ","), zoom = 20, maptype = "satellite")
#
print(r)
r <- qmap(paste(df_M10$latitude[1],df_M10$longitude[1],sep = ","), zoom = 20, maptype = "streetview")
r <- qmap(paste(df_M10$latitude[1],df_M10$longitude[1],sep = ","), zoom = 20, maptype = "hybrid")
#
print(r)
r <- qmap(paste(df_M10$latitude[1],df_M10$longitude[1],sep = ","), zoom = 25, maptype = "hybrid")
#
print(r)
View(df_MONOPOLE)
library(uuid)
set.seed(100)
replicate(10,UUIDgenerate())
test <- mtcars
test$ID <- replicate(nrow(mtcars),UUIDgenerate())
shiny::runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
shiny::runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
shiny::runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
traceback()
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
debug()
traceback()
traceback()
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
traceback()
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
debug()
debug('C:/Users/emedsat/Desktop/SIS_Shiny')
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
traceback()
install.packages(c("boot", "class", "foreign", "KernSmooth", "MASS", "nnet", "spatial", "tibble", "xml2"))
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
shiny::runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
db <- dbConnect(odbc(), "SQL Server")
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
library(DBI)
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
shiny::runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
dedebug()
View(geocoded)
shiny::runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
View(credentials)
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
# getwd()
#
#df1 <- read.csv("C:/Users/emedsat/Desktop/SIS_ALL.csv")
#
dc <- odbc::dbConnect(odbc(),"SQL Server")
odbc::dbWriteTable(dc,name = "SITE_INFORMATION_DATA_V1",value = df, overwrite = TRUE)
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
traceback()
library(rrefine)
install.packages('rrefine')
library(rrefine)
library(rrefine)
refine_upload(file = "lateformeeting.csv", project.name = "lfm_cleanup", open.browser = TRUE)
getwd()
write.csv(lateformeeting, file = "lateformeeting.csv", row.names = FALSE)
refine_upload(file = "lateformeeting.csv", project.name = "lfm_cleanup", open.browser = TRUE)
lfm_clean <- refine_export(project.name = "lfm_cleanup")
refine_upload(file = "lateformeeting.csv", project.name = "lfm_cleanup", open.browser = TRUE)
lfm_clean <- refine_export(project.name = "lfm_cleanup")
refine_upload(file = "lateformeeting.csv", project.name = "lfm_cleanup", open.browser = TRUE)
shiny::runApp('C:/Users/emedsat/Desktop/SIS_Shiny')
library(shiny)
library(googleLanguageR)  # assume auto auth setup
ui <- fluidPage(
gl_talk_shinyUI("talk")
)
server <- function(input, output, session){
transcript <- reactive({
paste("This is a demo talking Shiny app!")
})
callModule(gl_talk_shiny, "talk", transcript = transcript)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(googleLanguageR)  # assume auto auth setup
ui <- fluidPage(
gl_talk_shinyUI("talk")
)
server <- function(input, output, session){
transcript <- reactive({
paste("This is a demo talking Shiny app!")
})
callModule(gl_talk_shiny, "talk", transcript = transcript)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(googleLanguageR)  #
install.packages('googlelanguageR')
install.packages('googleLanguageR')
library(shiny)
library(googleLanguageR)  # assume auto auth setup
ui <- fluidPage(
gl_talk_shinyUI("talk")
)
server <- function(input, output, session){
transcript <- reactive({
paste("This is a demo talking Shiny app!")
})
callModule(gl_talk_shiny, "talk", transcript = transcript)
}
shinyApp(ui = ui, server = server)
key <-"AIzaSyCTgBDZHyD49yy4g_QyLSSKBcjWnxnFRpc"
set_key("AIzaSyCTgBDZHyD49yy4g_QyLSSKBcjWnxnFRpc")
register_google(key = key)
library(shiny)
library(googleLanguageR)  # assume auto auth setup
key <-"AIzaSyCTgBDZHyD49yy4g_QyLSSKBcjWnxnFRpc"
set_key("AIzaSyCTgBDZHyD49yy4g_QyLSSKBcjWnxnFRpc")
register_google(key = key)
ui <- fluidPage(
gl_talk_shinyUI("talk")
)
server <- function(input, output, session){
transcript <- reactive({
paste("This is a demo talking Shiny app!")
})
callModule(gl_talk_shiny, "talk", transcript = transcript)
}
shinyApp(ui = ui, server = server)
gl_talk_shinyUI()
library(shiny)
library(cognizer)
# the required api keys
username_TTS <-""
password_TTS <- ""
TEXT_TO_SPEECH_USERNAME_PASSWORD = paste(username_TTS,":",password_TTS,sep="")
ui <- fluidPage(
# Application title
titlePanel("Just some text to speech example"),
fluidRow(textInput("caption","Enter the caption"),actionButton("gobutton","submit")),
fluidRow(verbatimTextOutput("answer"), width = 4),
# plays from www/
fluidRow(
uiOutput("play")
)
)
server <- function(input, output) {
observeEvent(input$gobutton, {
unlink("www/*.wav")
thetext <- input$caption
text_audio(thetext, TEXT_TO_SPEECH_USERNAME_PASSWORD, directory = 'www', accept = "audio/wav")
file.rename("www/1.wav", paste0("www/number",input$gobutton,".wav"))
"Done!"
output$play <- renderUI(
tags$audio(src = paste0("temp.wav"), type = "audio/wav", controls = NA)
)
output$play <- renderUI(
tags$audio(src = paste0("number", input$gobutton,".wav"), type = "audio/wav", controls = NA)
)
output$answer <- renderText(paste("Done!", input$gobutton))
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(googleLanguageR)  # assume auto auth setup
key <-"AIzaSyCTgBDZHyD49yy4g_QyLSSKBcjWnxnFRpc"
set_key("AIzaSyCTgBDZHyD49yy4g_QyLSSKBcjWnxnFRpc")
ga_auth("AIzaSyCTgBDZHyD49yy4g_QyLSSKBcjWnxnFRpc")
register_google(key = key)
ui <- fluidPage(
gl_talk_shinyUI("talk")
)
server <- function(input, output, session){
transcript <- reactive({
paste("This is a demo talking Shiny app!")
})
callModule(gl_talk_shiny, "talk", transcript = transcript)
}
shinyApp(ui = ui, server = server)
library(Rtts)
install.packages('Rtts')
library(Rtts)
# NOT RUN {
# }
# NOT RUN {
test_audio <- system.file("woman1_wb.wav", package = "googleLanguageR")
result <- gl_speech(test_audio)
gl_speech()
?gl_speech
?Startup
install.packages('ComplexUpset')
library(Complexupset)
install.packages('ComplexUpset')
install.packages('Rtools')
shiny::runApp('My Received Files/SIS_Shiny')
install.packages('IMWatson')
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("mxnet")
install.packages("drat", repos="https://cran.rstudio.com")
install.packages("drat", repos="https://cran.rstudio.com")
install.packages("drat", repos = "https://cran.rstudio.com")
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("mxnet")
drat::insertPackage("pkg_1.0.0.tar.gz", "S:/path/to/drat")
install.packages("mxnet")
install.packages("mxnet")
install.packages('mxnet')
cran <- getOption(“repos”)
install.packages("https://s3.ca-central-1.amazonaws.com/jeremiedb/share/mxnet/CPU/3.6/mxnet.zip", repos = NULL)
library(mxnet)
drat::addRepo('dmlc')
library(drat)
library(mxnet)
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
install.packages('EBImage')
library(EBImage)
library(keras)
library(keras)   # for working with neural nets
library(lime)    # for explaining models
install.packages('lime')
install.packages('lime')
install.packages('magick')
library(keras)   # for working with neural nets
library(lime)    # for explaining models
library(magick)  # for preprocessing images
library(ggplot2) # for additional plotting
shiny::runApp('My Received Files/SIS_Shiny')
#calling libraries
library(readxl) #Excel Transfomation
#Reading the ISG Part Number File from the Sharepoint
TEST <- read_xlsx("https://ericsson.sharepoint.com/sites/MLKnowledgeBase/Shared%20Documents/Forms/AllItems.aspx?id=%2Fsites%2FMLKnowledgeBase%2FShared%20Documents%2FPiyush%2FUNity%2F20191027%2Ezip&parent=%2Fsites%2FMLKnowledgeBase%2FShared%20Documents%2FPiyush%2FUNity")
Test <- read_excel("https://ericsson.sharepoint.com/:x:/r/sites/MLKnowledgeBase/_layouts/15/Doc.aspx?sourcedoc=%7BB05906B6-1E68-46B0-B20A-14614D99730B%7D&file=Vancouver%20CDR%20BM1%20Voice%20Calls.xlsx")
Test <- read_excel("https://ericsson.sharepoint.com/sites/MLKnowledgeBase/_layouts/15/Doc.aspx?sourcedoc=%7BB05906B6-1E68-46B0-B20A-14614D99730B%7D&file=Vancouver%20CDR%20BM1%20Voice%20Calls.xlsx")
ISG_Part_Numbers <- read_xlsx("//share-internal.deere.com/DavWWWRoot/Teams/ISGReliability/ISG Enterprise Guide Projects/ISG Part Numbers.xlsx")
Test <- read_excel("//ericsson.sharepoint.com/sites/MLKnowledgeBase/_layouts/15/Doc.aspx?sourcedoc=%7BB05906B6-1E68-46B0-B20A-14614D99730B%7D&file=Vancouver%20CDR%20BM1%20Voice%20Calls.xlsx")
Test <- read_excel("//ericsson.sharepoint.com/sites/MLKnowledgeBase/_layouts/15/Vancouver%20CDR%20BM1%20Voice%20Calls.xlsx")
setwd('https://ericsson.sharepoint.com/sites/MLKnowledgeBase')
setwd('https://ericsson.sharepoint.com/sites/MLKnowledgeBase')
read_excel('https://ericsson.sharepoint.com/sites/MLKnowledgeBase')
read_excel('https://ericsson.sharepoint.com/sites/MLKnowledgeBase/RogersWireless_RDE20_Voice_M2M_Calls_2018-09-26_13-26-13.xlsx')
read_excel('https://ericsson.sharepoint.com/sites/MLKnowledgeBase/')
setwd('https://ericsson.sharepoint.com/sites/MLKnowledgeBase')
setwd('//ericsson.sharepoint.com/sites/MLKnowledgeBase')
shiny::runApp('C:/Users/emedsat/Desktop/image_recognition-master')
install.packages('wordcloud')
runApp('C:/Users/emedsat/Desktop/image_recognition-master')
install.packages('h5py')
install.packages('keras')
install.packages('keras')
install.packages("keras")
shiny::runApp('C:/Users/emedsat/Desktop/image_recognition-master')
runApp('C:/Users/emedsat/Desktop/image_recognition-master')
library(wordcloud)
library(DT)
library(keras)
library(wordcloud)
library(DT)
library(keras)
model <- application_resnet50(weights = 'imagenet')
TOP_CLASSES            <- 10
RESNET_50_IMAGE_FORMAT <- c(224, 224)
library(reticulate)
os <- import("os")
os$listdir(".")
model <- application_resnet50(weights = 'imagenet')
install.packages("h5py")
devtools::install_github("decryptr/decryptr")
model <- application_resnet50(weights = 'imagenet')
library(keras)
install_keras()
shiny::runApp('C:/Users/emedsat/Desktop/SIS_Shiny_A')
RODBC::odbcQuery(db,query)
runApp('C:/Users/emedsat/Desktop/SIS_Shiny_A')
db <-  RODBC::odbcDriverConnect('driver={ODBC Driver 17 for SQL Server};server=138.85.180.102;database=DEV-ADAP_DB01;trusted_connection=true')
con <- dbConnect(odbc(),
Driver = "MSSQLTest",
Server = "138.85.180.102",
Database = "DEV-ADAP_DB01",
# UID      = rstudioapi::askForPassword("Database user"),
# PWD      = rstudioapi::askForPassword("Database password"),
#encoding = "windows-1252",
trusted_connection=true
)
con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "138.85.180.102",
Database = "DEV-ADAP_DB01",
# UID      = rstudioapi::askForPassword("Database user"),
# PWD      = rstudioapi::askForPassword("Database password"),
#encoding = "windows-1252",
trusted_connection=true
con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "138.85.180.102",
Database = "DEV-ADAP_DB01",
# UID      = rstudioapi::askForPassword("Database user"),
# PWD      = rstudioapi::askForPassword("Database password"),
#encoding = "windows-1252",
trusted_connection=true
)
con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "138.85.180.102",
Database = "DEV-ADAP_DB01",
# UID      = rstudioapi::askForPassword("Database user"),
# PWD      = rstudioapi::askForPassword("Database password"),
#encoding = "windows-1252",
trusted_connection = "true"
)
runApp('C:/Users/emedsat/Desktop/SIS_Shiny_A')
odbc::?dbConnect()
?dbConnect()
library(odbc)
?dbConnect
install.packages("plumber")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
db <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "138.85.180.102",
Database = "DEV-ADAP_DB01",
uid = "emedsat",
pwd = "Dreamworks@6u",
# UID      = rstudioapi::askForPassword("Database user"),
# PWD      = rstudioapi::askForPassword("Database password"),
#encoding = "windows-1252",
trusted_connection = "true"
)
library(odbc)
db <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "138.85.180.102",
Database = "DEV-ADAP_DB01",
uid = "emedsat",
pwd = "Dreamworks@6u",
# UID      = rstudioapi::askForPassword("Database user"),
# PWD      = rstudioapi::askForPassword("Database password"),
#encoding = "windows-1252",
trusted_connection = "true"
)
db <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "138.85.180.102",
Database = "DEV-ADAP_DB01",
uid = "emedsat",
pwd = "Dreamworks@6u",
# UID      = rstudioapi::askForPassword("Database user"),
# PWD      = rstudioapi::askForPassword("Database password"),
#encoding = "windows-1252",
# trusted_connection = "true"
)
db <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "138.85.180.102",
Database = "DEV-ADAP_DB01"
# uid = "emedsat",
# pwd = "Dreamworks@6u",
# UID      = rstudioapi::askForPassword("Database user"),
# PWD      = rstudioapi::askForPassword("Database password"),
#encoding = "windows-1252",
# trusted_connection = "true"
)
install.packages("tidytext")
library(tidyverse)
library(glue)
library(jsonlite)
library(dbplyr)
library(DBI)
library(RSQLite)
library(knitr)
library(tidytext)
library(plumber)
library(plumber)
library(jsonlite)
# load in some test sports data to host
mydata = structure(list(Team = structure(c(8L, 20L, 7L, 28L, 2L, 30L,
23L, 1L, 6L, 19L), .Label = c("Angels", "Astros", "Athletics",
"Blue Jays", "Braves", "Brewers", "Cardinals", "Cubs", "Diamondbacks",
"Dodgers", "Giants", "Indians", "Mariners", "Marlins", "Mets",
"Nationals", "Orioles", "Padres", "Phillies", "Pirates", "Rangers",
"Rays", "Red Sox", "Reds", "Rockies", "Royals", "Tigers", "Twins",
"White Sox", "Yankees"), class = "factor"), GamesPlayed = c(162L,
162L, 162L, 162L, 162L, 162L, 162L, 162L, 162L, 162L), CurrentWins = c(92L,
75L, 83L, 85L, 101L, 91L, 93L, 80L, 86L, 66L)), .Names = c("Team",
"GamesPlayed", "CurrentWins"), row.names = c(NA, 10L), class = "data.frame")
# load in some test sports data to host
mydata = structure(list(Team = structure(c(8L, 20L, 7L, 28L, 2L, 30L,
23L, 1L, 6L, 19L), .Label = c("Angels", "Astros", "Athletics",
"Blue Jays", "Braves", "Brewers", "Cardinals", "Cubs", "Diamondbacks",
"Dodgers", "Giants", "Indians", "Mariners", "Marlins", "Mets",
"Nationals", "Orioles", "Padres", "Phillies", "Pirates", "Rangers",
"Rays", "Red Sox", "Reds", "Rockies", "Royals", "Tigers", "Twins",
"White Sox", "Yankees"), class = "factor"), GamesPlayed = c(162L,
162L, 162L, 162L, 162L, 162L, 162L, 162L, 162L, 162L), CurrentWins = c(92L,
75L, 83L, 85L, 101L, 91L, 93L, 80L, 86L, 66L)), .Names = c("Team",
"GamesPlayed", "CurrentWins"), row.names = c(NA, 10L), class = "data.frame")
View(mydata)
# create a GET request for shareprices (in JSON format)
#* @get /shareprices_json
getSPs <- function(){
return(toJSON(mydata))
}
# create a GET request for MLB shareprices (in CSV format)
#* @get /shareprices_csv
csvSPs <- function(){
return(mydata)
}
getSPs()
csvSPs()
library(plumber)
r <- plumb("setupAPI.R")
r$run(port=8000)
getwd()
getwd()
r <- plumb("setupAPI.R")
r$run(port=8000)
library(plumber)
getwd()
r <- plumb("setupAPI.R")
r$run(port=8000)
mydata <- read.csv('C:/Users/Default/Desktop/sites.csv')
mydata <- read.csv('C:/Users/Default/Desktop/sites.csv')
# load in some test sports data to host
mydata = read.csv('sites.csv')
# create a GET request for shareprices (in JSON format)
#* @get /sites_json
getSPs <- function(){
return(toJSON(mydata))
}
# create a GET request for MLB shareprices (in CSV format)
#* @get /sites_csv
csvSPs <- function(){
return(mydata)
}
library(plumber)
getwd()
r <- plumb("setupAPI.R")
r$run(port=8000)
library(plumber)
getwd()
r <- plumb("setupAPI.R")
r$run(port=8000)
library(tidyverse)
library(glue)
library(jsonlite)
library(dbplyr)
library(DBI)
library(RSQLite)
library(knitr)
library(tidytext)
library(plumber)
library(plumber)
library(jsonlite)
# load in some test sports data to host
mydata = read.csv('sites.csv')
# create a GET request for shareprices (in JSON format)
#* @get /sites_json
getSPs <- function(){
return(toJSON(mydata))
}
# create a GET request for MLB shareprices (in CSV format)
#* @get /sites_csv
csvSPs <- function(){
return(mydata)
}
getwd()
r <- plumb("setupAPI.R")
r$run(port=8000)
library(plumber)
getwd()
r <- plumb("setupAPI.R")
r$run(port=8000)
#read in required packages
require(readxl)
require(tidyverse)
#set the working directory from which the files will be read from
setwd("C:/Users/emedsat/Desktop/Connected_Systems/Outputs")
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
View(ZVBAK.csv)
View(ZVBAK.csv)
unique(ZVBAK.csv$PO.Date)
View(ZVBAK.csv)
ZVBAK_2020 <- ZVBAK.csv %>%  filter(PO.Date >= '2020-01-01 00:00:00')
ZVBAK_2020 <- ZVBAK.csv %>%  filter(PO.Date > '2020-01-01 00:00:00')
ZVBAK_2020 <- ZVBAK.csv %>%  filter(PO.Date => '2020-01-01 00:00:00')
library(dplyr)
ZVBAK_2020 <- ZVBAK.csv %>%  filter(PO.Date >= '2020-01-01 00:00:00')
ZVBAK_2020 <- ZVBAK.csv %>%  filter(PO.Date > '2020-01-01 00:00:00')
View(ZVBAK_2020)
View(ZVBAK.csv)
View(ZVBAP.csv)
View(ZVBRK.csv)
View(ZVBRP.csv)
View(ZVBRK.csv)
shiny::runApp('C:/COVID_19')
runApp('C:/COVID_19')
runApp('C:/COVID_19')
